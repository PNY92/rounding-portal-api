// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoundingPortal_API.Data;

#nullable disable

namespace RoundingPortal_API.Migrations
{
    [DbContext(typeof(RoundingContext))]
    [Migration("20250408082407_Added more properties for Issue")]
    partial class AddedmorepropertiesforIssue
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RoundingPortal_API.Models.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReporterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Workstation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("RoundingPortal_API.Models.Lab", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxSeats")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Labs");
                });

            modelBuilder.Entity("RoundingPortal_API.Models.Rounder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Shift")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rounders");
                });

            modelBuilder.Entity("RoundingPortal_API.Models.Workstation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LabId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LabId");

                    b.ToTable("Workstations");
                });

            modelBuilder.Entity("RoundingPortal_API.Models.WorkstationRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Boot_To_Windows")
                        .HasColumnType("int");

                    b.Property<int>("Browser")
                        .HasColumnType("int");

                    b.Property<int>("Conduiting")
                        .HasColumnType("int");

                    b.Property<int>("DeepFreeze_Frozen")
                        .HasColumnType("int");

                    b.Property<string>("DeepFreeze_Policy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Display")
                        .HasColumnType("int");

                    b.Property<int>("Domain")
                        .HasColumnType("int");

                    b.Property<int>("Kensington_Lock")
                        .HasColumnType("int");

                    b.Property<int>("Microsoft_Office")
                        .HasColumnType("int");

                    b.Property<int>("Microsoft_Teams")
                        .HasColumnType("int");

                    b.Property<int>("Mouse_Keyboard")
                        .HasColumnType("int");

                    b.Property<Guid>("RounderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Tidiness")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WorkstationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RounderId");

                    b.HasIndex("WorkstationId");

                    b.ToTable("WorkstationRecords");
                });

            modelBuilder.Entity("RoundingPortal_API.Models.Issue", b =>
                {
                    b.HasOne("RoundingPortal_API.Models.Rounder", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("RoundingPortal_API.Models.Workstation", b =>
                {
                    b.HasOne("RoundingPortal_API.Models.Lab", "Lab")
                        .WithMany()
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("RoundingPortal_API.Models.WorkstationRecord", b =>
                {
                    b.HasOne("RoundingPortal_API.Models.Rounder", "Rounder")
                        .WithMany()
                        .HasForeignKey("RounderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoundingPortal_API.Models.Workstation", "Workstation")
                        .WithMany()
                        .HasForeignKey("WorkstationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rounder");

                    b.Navigation("Workstation");
                });
#pragma warning restore 612, 618
        }
    }
}
